# 0x1E. C - Search Algorithms

## Description
This project focuses on implementing and understanding search algorithms in C programming. The primary objective is to explore various search techniques, including linear and binary search, and to determine the best algorithm based on specific needs and constraints.

## Learning Objectives
At the end of this project, you should be able to explain the following concepts to anyone, without the help of Google:

### General
- What is a search algorithm?
- What is a linear search?
- What is a binary search?
- How to choose the best search algorithm depending on your needs.

## Resources
Read or watch:
- [Search algorithm](https://en.wikipedia.org/wiki/Search_algorithm)
- [Space complexity](https://en.wikipedia.org/wiki/Space_complexity)
- [Search Algorithms video playlist](https://www.youtube.com/playlist?list=PL2_aWCzGMAwLL-mEB4ef20f3iqWMGWa25)

## Requirements
### General
- Allowed editors: `vi`, `vim`, `emacs`.
- All files will be compiled on Ubuntu 20.04 LTS using `gcc`, with the options:
  ```bash
  -Wall -Werror -Wextra -pedantic -std=gnu89
  ```
- All files should end with a new line.
- A `README.md` file, at the root of the folder of the project, is mandatory.
- Your code should use the Betty style. It will be checked using `betty-style.pl` and `betty-doc.pl`.
- You are not allowed to use global variables.
- No more than 5 functions per file.
- You are only allowed to use the `printf` function of the standard library. Any call to another function like `strdup`, `malloc`, etc., is forbidden.
- In the following examples, the `main.c` files are shown as examples. You can use them to test your functions, but you don’t have to push them to your repo (if you do, we won’t take them into account). We will use our own `main.c` files at compilation. Our `main.c` files might be different from the one shown in the examples.
- The prototypes of all your functions should be included in your header file called `search_algos.h`.
- Don’t forget to push your header file.
- All your header files should be include guarded.

## Tasks

### **0. Linear search**
Write a function that searches for a value in an array of integers using the Linear search algorithm.
- Prototype: `int linear_search(int *array, size_t size, int value);`
- Returns the first index where `value` is located or `-1` if the array is NULL or the value is not found.

### **1. Binary search**
Write a function that searches for a value in a sorted array of integers using the Binary search algorithm.
- Prototype: `int binary_search(int *array, size_t size, int value);`
- You can assume the array is already sorted in ascending order.
- Returns the index where `value` is located or `-1` if the array is NULL or the value is not found.

### **2. Big O**
Write a `.txt` file explaining the time complexity of both Linear and Binary search algorithms.
- Include both worst-case and average-case scenarios.

### **3. Advanced tasks** (if applicable)
Additional challenges to deepen understanding of search algorithms (details to be added later).

## Compilation and Execution
To compile your code, use:
```bash
gcc -Wall -Werror -Wextra -pedantic -std=gnu89 <filename.c> -o <output>
```
To execute:
```bash
./<output>
```

## Author
Duncan Korir
